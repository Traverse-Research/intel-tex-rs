#[allow(non_camel_case_types,dead_code,non_upper_case_globals,non_snake_case,improper_ctypes)]
pub mod kernel_astc {
/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rgba_surface {
    pub ptr: *mut u8,
    pub width: i32,
    pub height: i32,
    pub stride: i32,
}
#[test]
fn bindgen_test_layout_rgba_surface() {
    const UNINIT: ::std::mem::MaybeUninit<rgba_surface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rgba_surface>(),
        24usize,
        concat!("Size of: ", stringify!(rgba_surface))
    );
    assert_eq!(
        ::std::mem::align_of::<rgba_surface>(),
        8usize,
        concat!("Alignment of ", stringify!(rgba_surface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rgba_surface),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rgba_surface),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rgba_surface),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rgba_surface),
            "::",
            stringify!(stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct astc_enc_context {
    pub width: i32,
    pub height: i32,
    pub channels: i32,
    pub dual_plane: bool,
    pub partitions: i32,
    pub color_endpoint_pairs: i32,
}
#[test]
fn bindgen_test_layout_astc_enc_context() {
    const UNINIT: ::std::mem::MaybeUninit<astc_enc_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<astc_enc_context>(),
        24usize,
        concat!("Size of: ", stringify!(astc_enc_context))
    );
    assert_eq!(
        ::std::mem::align_of::<astc_enc_context>(),
        4usize,
        concat!("Alignment of ", stringify!(astc_enc_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_context),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_context),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_context),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dual_plane) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_context),
            "::",
            stringify!(dual_plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).partitions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_context),
            "::",
            stringify!(partitions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_endpoint_pairs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_context),
            "::",
            stringify!(color_endpoint_pairs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct astc_enc_settings {
    pub block_width: i32,
    pub block_height: i32,
    pub channels: i32,
    pub fastSkipTreshold: i32,
    pub refineIterations: i32,
}
#[test]
fn bindgen_test_layout_astc_enc_settings() {
    const UNINIT: ::std::mem::MaybeUninit<astc_enc_settings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<astc_enc_settings>(),
        20usize,
        concat!("Size of: ", stringify!(astc_enc_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<astc_enc_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(astc_enc_settings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_settings),
            "::",
            stringify!(block_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_settings),
            "::",
            stringify!(block_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_settings),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastSkipTreshold) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_settings),
            "::",
            stringify!(fastSkipTreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refineIterations) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(astc_enc_settings),
            "::",
            stringify!(refineIterations)
        )
    );
}
extern "C" {
    pub fn astc_encode_ispc(
        src: *mut rgba_surface,
        block_scores: *mut f32,
        dst: *mut u8,
        list: *mut u64,
        list_context: *mut astc_enc_context,
        settings: *mut astc_enc_settings,
    );
}
extern "C" {
    pub fn astc_rank_ispc(
        src: *mut rgba_surface,
        xx: i32,
        yy: i32,
        mode_buffer: *mut u32,
        settings: *mut astc_enc_settings,
    );
}
extern "C" {
    pub fn get_programCount() -> i32;
}
}